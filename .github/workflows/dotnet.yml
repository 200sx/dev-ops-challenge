name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit Test Phase - if successful, upload the image to ECR
  # code coverage reports are also printed - ideally should generate HTML document & upload
  # to S3 for readability and sharing
  unittest-deploy-image:
    runs-on: ubuntu-latest
    environment: development_environment
    steps:
    # This step checks out the code using github actions (prebuilt module)
    - uses: actions/checkout@v2
    # This step sets up the .NET environment required for application build
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    # Build and test phase of pipeline
    - name: Dotnet Restore
      run: dotnet restore
    - name: Dotnet Build
      run: dotnet build --no-restore -c Release
    - name: Dotnet Publish
      run: dotnet publish -c Release
    - name: Unit Tests - Business
      run: dotnet test tests/DevOpsChallenge.SalesApi.Business.UnitTests/bin/Release/net5.0/DevOpsChallenge.SalesApi.Business.UnitTests.dll --collect:"XPlat Code Coverage"
    - name: Echo Test Results
      run: cat $(find TestResults -name coverage.cobertura.xml) 
    - name: Echo Build Version
      run: echo ${{ github.sha }}
    # If tests are successful, push to ECR as latest and versioned
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ap-southeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: 201293276503.dkr.ecr.ap-southeast-2.amazonaws.com/app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest
    
    # Integration Test Phase - only runs if unit test and building succeeds
    # but ideally move to another pipeline to have fine control over execution triggers
    # NOTE: this sets up a new VM for job, hence added delay
    integration-test:
      runs-on: ubuntu-latest
      environment: development_environment
      steps:
      # This step checks out the code using github actions (prebuilt module)
      - uses: actions/checkout@v2
      - name: Check out code
        uses: actions/checkout@v2
      # Build the images 
      - name: Build docker images
        run: docker-compose build
      # Run containers 
      - name: Setup Environment
        run: docker-compose start
      # Publish and run test suite
      - name: Run tests
        run: docker-compose run test
      - name: Dotnet Publish
        run: dotnet publish -c Release
      - name: Integration Tests - Business
        run: dotnet test tests/DevOpsChallenge.SalesApi.Business.UnitTests/bin/Release/net5.0/DevOpsChallenge.SalesApi.Business.UnitTests.dll --collect:"XPlat Code Coverage"
      # This step never runs due to Integration Test Failure (DB schema related)
      - name: Echo Test Results
      run: cat $(find TestResults -name coverage.cobertura.xml) 
