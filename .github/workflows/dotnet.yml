name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build-image:
    runs-on: macos-10.15
    environment: development_environment
    steps:
    # This step checks out the code using github actions (prebuilt module)
    - uses: actions/checkout@v2
    # This step sets up the .NET environment required for application build
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    # Build and test phase of pipeline
    - name: Dotnet Restore
      run: dotnet restore
    - name: Dotnet Build
      run: dotnet build --no-restore -c Release
    - name: Dotnet Publish
      run: dotnet publish -c Release
    - name: Unit Tests - Business
      run: dotnet test tests/DevOpsChallenge.SalesApi.Business.UnitTests/bin/Release/net5.0/DevOpsChallenge.SalesApi.Business.UnitTests.dll --collect:"XPlat Code Coverage"
    - name: Echo Test Results
      run: cat $(find TestResults -name coverage.cobertura.xml) 
    - name: Echo Build Version
      run: echo ${{ github.sha }}
    # If tests are successful, push to ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ap-southeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: 201293276503.dkr.ecr.ap-southeast-2.amazonaws.com/app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG